/*
    Copyright (C) 2018 RISCassembler

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.
    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import java.time.LocalDateTime

group 'capslock'
version '1.0.0'

apply plugin: 'java'
sourceCompatibility = 1.8
compileTestJava.enabled = false

apply plugin: 'groovy'
compileGroovy.enabled = false

apply plugin: 'application'
mainClassName = 'capslock.kiddy_register.main.Main'
startScripts.enabled = false
distZip.enabled = false
distTar.enabled = false

apply plugin: 'com.github.johnrengelman.shadow'
startShadowScripts.enabled = false
shadowDistTar.enabled = false
shadowDistZip.enabled = false

repositories {
    mavenCentral()
    flatDir{
        dirs 'lib'
    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
    }
}

dependencies {
    compile group: 'org.json', name: 'json', version:  '+'
    testCompile 'org.codehaus.groovy:groovy-all:2.3.11'

    compile name: "TrivialLogger"
    compile name: "FileChecker"
    compile name: "capslock"
    compile name: "game_info"
}

tasks.withType(JavaCompile){
    options.encoding = 'UTF-8'
}

processResources.doLast {
    def buildInfoFile = new File(processResources.destinationDir.path + '/BuildInfo.txt')
    buildInfoFile.bytes = []
    buildInfoFile << 'version : ' + version + '\n'
    buildInfoFile << 'git_commit_hash : ' +  'git rev-parse HEAD'.execute().text.trim()  + '\n'
    buildInfoFile << 'date : ' + LocalDateTime.now()
}

compileJava.doFirst {
    def libDir = Paths.get(System.getProperty("user.dir") + "/lib/")
    if (Files.notExists(libDir)) {
        Files.createDirectory(libDir)
    }

    def file_checkerPath = Paths.get(System.getProperty("user.dir") + "/lib/FileChecker.jar")
    if (Files.notExists(file_checkerPath)) {
        println "Downloading FileChecker.jar ..."
        try {
            URL website = new URL("https://github.com/chrootRISCassembler/dependence/raw/master/FileChecker-1.1.1-SNAPSHOT.jar")
            InputStream inStream = website.openStream()
            Files.copy(inStream, file_checkerPath, StandardCopyOption.REPLACE_EXISTING)

            println "Download succeeded "
        } catch (Exception ex) {
            println "Download failed"
            throw ex
        }
    }

    def trivial_loggerPath = Paths.get(System.getProperty("user.dir") + "/lib/TrivialLogger.jar")
    if (Files.notExists(trivial_loggerPath)) {
        println "Downloading TrivialLogger.jar ..."
        try {
            URL website = new URL("https://github.com/chrootRISCassembler/dependence/raw/master/TrivialLogger-1.1.1-SNAPSHOT.jar")
            InputStream inStream = website.openStream()
            Files.copy(inStream, trivial_loggerPath, StandardCopyOption.REPLACE_EXISTING)

            println "Download succeeded "
        } catch (Exception ex) {
            println "Download failed"
            throw ex
        }
    }

    def game_infoPath = Paths.get(System.getProperty("user.dir") + "/lib/game_info.jar")
    if (Files.notExists(game_infoPath)) {
        println "Downloading game_info.jar ..."
        try {
            URL website = new URL("https://github.com/chrootRISCassembler/dependence/raw/master/game_info-1.0.0-SNAPSHOT.jar")
            InputStream inStream = website.openStream()
            Files.copy(inStream, game_infoPath, StandardCopyOption.REPLACE_EXISTING)

            println "Download succeeded "
        } catch (Exception ex) {
            println "Download failed"
            throw ex
        }
    }
}

task forceUpdateLib{
    doLast {
        println "force update library"

        def libDir = Paths.get(System.getProperty("user.dir") + "/lib/")
        if (Files.notExists(libDir)) {
            Files.createDirectory(libDir)
        }

        println "Downloading FileChecker.jar ..."
        try {
            URL website = new URL("https://github.com/chrootRISCassembler/dependence/raw/master/FileChecker-1.1.1-SNAPSHOT.jar")
            InputStream inStream = website.openStream()
            def file_checkerPath = Paths.get(System.getProperty("user.dir") + "/lib/FileChecker.jar")
            Files.copy(inStream, file_checkerPath, StandardCopyOption.REPLACE_EXISTING)
            println "Download succeeded "
        } catch (Exception ex) {
            println "Download failed"
            throw ex
        }

        println "Downloading TrivialLogger.jar ..."
        try {
            URL website = new URL("https://github.com/chrootRISCassembler/dependence/raw/master/TrivialLogger-1.1.1-SNAPSHOT.jar")
            InputStream inStream = website.openStream()
            def trivial_loggerPath = Paths.get(System.getProperty("user.dir") + "/lib/TrivialLogger.jar")
            Files.copy(inStream, trivial_loggerPath, StandardCopyOption.REPLACE_EXISTING)
            println "Download succeeded "
        } catch (Exception ex) {
            println "Download failed"
            throw ex
        }

        println "Downloading game_info.jar ..."
        try {
            URL website = new URL("https://github.com/chrootRISCassembler/dependence/raw/master/game_info-1.0.0-SNAPSHOT.jar")
            InputStream inStream = website.openStream()
            def trivial_loggerPath = Paths.get(System.getProperty("user.dir") + "/lib/game_info.jar")
            Files.copy(inStream, trivial_loggerPath, StandardCopyOption.REPLACE_EXISTING)
            println "Download succeeded "
        } catch (Exception ex) {
            println "Download failed"
            throw ex
        }
    }
}

task cpFXML(type: Copy){
    from 'src/main/resources'
    into 'build/classes/java/main/capslock/kiddy_register/main'
}

run {
    tasks.cpFXML.execute()
}
